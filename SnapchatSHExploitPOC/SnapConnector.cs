using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace SnapSnatcher
{
    public class SnapConnector
    {
        protected const string SECRET = "iEk21fuwZApXlz93750dmW22pw389dPwOk";
        protected const string PATTERN = "0001110111101110001111010101111011010001001110011000110001000110";

        protected static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1);
        public static string timestamp()
        {
            TimeSpan ts = DateTime.Now - UnixEpoch;
            return ts.TotalSeconds.ToString(CultureInfo.InvariantCulture);
        }

        public static string getReqToken(string timestamp, string authToken)
        {
            string first = string.Format("{0}{1}", SECRET, authToken);
            string second = string.Format("{0}{1}", timestamp, SECRET);

            first = Sha256(first);
            second = Sha256(second);

            StringBuilder token = new StringBuilder();
            for (int i = 0; i < PATTERN.Length; i++)
            {
                char c = PATTERN[i];
                if (c == '0')
                {
                    token.Append(first[i]);
                }
                else
                {
                    token.Append(second[i]);
                }
            }
            return token.ToString();
        }

        public static string forgeReqToken(string timestamp, string reqToken)
        {
            string second = string.Format("{0}{1}", timestamp, SECRET);

            second = Sha256(second);

            StringBuilder token = new StringBuilder();
            for (int i = 0; i < PATTERN.Length; i++)
            {
                char c = PATTERN[i];
                if (c == '0')
                {
                    token.Append(reqToken[i]);
                }
                else
                {
                    token.Append(second[i]);
                }
            }
            return token.ToString();
        }

        protected static string Sha256(string data)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(data);
            var hashstring = new SHA256Managed();
            byte[] hash = hashstring.ComputeHash(bytes);
            return hash.Aggregate(string.Empty, (current, x) => current + String.Format("{0:x2}", x));
        }
    }
}
